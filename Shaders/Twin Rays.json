{"working":false,"featured":false,"private":false,"stars":["5e7a7f587c113618206ddb11","5fe5f08fdf59c70014cdc4e8","607195c8df59c70014cdc659","6079e7b9d4849b0013135db4","5ff1eb31d4849b0013135c25","60c3e368df59c70014cdc6da","60f5267ff4fe08001a0a6216","5f512245b1ed0d0014c0006c","6109903e063978001a1c6ec2","617581b3f4fe08001a0a62d7","6185ecc5f4fe08001a0a62ee","6187097af4fe08001a0a62ef","61a02c60063978001a1c6f9b","61d5b38dfa146100147e1e78","62da707fad0a68001af8d8e5","62fba7a8ad0a68001afa5860","63119b25d12ead001af3ea8b","63139741d12ead001af40056","631c6ba4d12ead001af46c0d","638230e2d12ead001afa7d6f","63d2f22cd12ead001affa435","642fbe4154062a0019c06613","64419d0fa58c94001ac7241b","6493e879073c7a001a869268","64bbf2515913c5001a3faeee","655f3dc085611d001af01f2a","62221c907917e40014067e8c","65e7980b9f12c7001aeaaf4d"],"images":[],"categories":["5e7a80dd7c113618206df0a6"],"publicCategories":["Generator"],"privateCategories":[],"_id":"5e7a80297c113618206debee","title":"Twin Rays","rawFragmentSource":"/*\n{\n  \"CATEGORIES\" : [\n    \"Generator\"\n  ],\n  \"DESCRIPTION\" : \"Twin Rays\",\n  \"ISFVSN\" : \"2\",\n  \"INPUTS\" : [\n    {\n      \"NAME\" : \"rate\",\n      \"TYPE\" : \"float\",\n      \"MAX\" : 0.059999999999999998,\n      \"DEFAULT\" : -0.016063844785094261,\n      \"LABEL\" : \"SPEED\",\n      \"MIN\" : -0.059999999999999998\n    },\n    {\n      \"NAME\" : \"colorIN\",\n      \"TYPE\" : \"color\",\n      \"DEFAULT\" : [\n        1,\n        0.20000000298023224,\n        0.10000000149011612,\n        1\n      ],\n      \"LABEL\" : \"Color\"\n    },\n    {\n      \"NAME\" : \"Count\",\n      \"TYPE\" : \"float\",\n      \"MAX\" : 25,\n      \"DEFAULT\" : 18.131168365478516,\n      \"LABEL\" : \"Ray Count\",\n      \"MIN\" : 3\n    },\n    {\n      \"NAME\" : \"posY\",\n      \"TYPE\" : \"float\",\n      \"MAX\" : 0.5,\n      \"DEFAULT\" : -0.33067807555198669,\n      \"LABEL\" : \"Position Y\",\n      \"MIN\" : -0.5\n    },\n    {\n      \"NAME\" : \"posX\",\n      \"TYPE\" : \"float\",\n      \"MAX\" : 0.5,\n      \"DEFAULT\" : 0.1662137508392334,\n      \"LABEL\" : \"Position X\",\n      \"MIN\" : 0\n    },\n    {\n      \"NAME\" : \"width\",\n      \"TYPE\" : \"float\",\n      \"MAX\" : 0.45,\n      \"DEFAULT\" : 0.2891484797000885,\n      \"LABEL\" : \"Ray Width\",\n      \"MIN\" : 0.01\n    },\n\t\t{\n\t\t\t\"NAME\" : \"soft\",\n\t\t\t\"TYPE\" : \"float\",\n\t\t\t\"MAX\" : 0.99,\n\t\t\t\"DEFAULT\" : 0.2891484797000885,\n\t\t\t\"LABEL\" : \"Ray Softness\",\n\t\t\t\"MIN\" : 0.01\n\t\t}\n  ],\n  \n  \"CREDIT\" : \"howie.tv\"\n}\n*/\n// its a  howie.tv thing\n\n// _read the time buffer\n\n#define M_PI 3.1415926535897932384626433832795\n\n\n// rgb2hsv\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// hsv2rgb\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat rays(vec2 uv, float c, float w, float s)\n\t{\n\t\tuv.x = fract(uv.x*c)-0.5;\n\t \treturn smoothstep(-w , -w*s, uv.x) * smoothstep(w, w*s, uv.x);\n\t}\n\nvoid main() {\n\n\t\t\t\tfloat ratio = RENDERSIZE.y/RENDERSIZE.x;\n\t\t\t\tvec2 uv = vec2( isf_FragNormCoord.x -0.5, (isf_FragNormCoord.y -0.5) * ratio);\n\t\t\t\t\n\t\t\t\tvec3 color;\n\t\t\t\tvec3 col;\n\t\t\t\tvec2 UV;\n\t\t\t\tfloat m;\n\t\t\t\tfloat angle;\n\t\t\t\tfloat radius;\n\t\t\t\tfloat count = floor(Count);\n\t\t\t\tuv.y -= posY;\n\n\t\t\t\tvec3 hvs = rgb2hsv(colorIN.rgb);\n\t\t\t\tvec3 colorA = hsv2rgb(vec3(hvs.x +0.1, hvs.y, hvs.z));\n\t\t\t\tvec3 colorB = hsv2rgb(vec3(hvs.x -0.1, hvs.y, hvs.z));\n\n\t\t\t\tfor(int i = 0;  i< 2; i++)\n\t\t\t\t{\n\t\t\t\t\tUV = uv;\n\t\t\t\t\tUV.x -= posX*(1.0-(float(i)*2.0));\n\t\t\t\t\tUV.x *= 1.0-(float(i)*2.0);\n\t\t\t\t\tangle = atan(UV.y, UV.x);\n\t\t\t\t\tangle = angle/((M_PI*4.0)*0.5) + TIME*rate\t;\n\t\t\t\t\tradius = length(UV);\n\t\t\t\t\tUV = vec2(angle, radius*1.5);\n\t\t\t\t\tcol = mix(colorA,colorB, abs(UV.y)/ratio);\n\n\n\t\t\t\t\tm = rays(UV,count,width,soft);\n\t\t\t\t\tm = pow(m,3.0);\n\t\t\t\t\tcolor += col*m;\n\t\t\t\t}\n\n\n\tgl_FragColor = vec4(color,1.0);\n}\n","rawVertexSource":"void main() {\n\tisf_vertShaderInit();\n}","thumbnailCloudinaryId":"quxll9orxfoqoqodkgsi","description":"Twin Rays","shaderType":"generator","oldId":"4405","createdAt":"2019-05-30T00:37:24.688Z","user":{"_id":"5e7a7f587c113618206ddb11","username":"_h_o_w_i_e_","name":"howie","id":"5e7a7f587c113618206ddb11"},"username":"_h_o_w_i_e_","updatedAt":"2024-03-05T22:19:24.990Z","__v":1,"id":"5e7a80297c113618206debee"}